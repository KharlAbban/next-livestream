/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type Blocking = {
  _id: string;
  _type: "blocking";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  blockerId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  blockedId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
};

export type Follow = {
  _id: string;
  _type: "follow";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  followerId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  followingId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  clerkId?: string;
  username?: string;
  email?: string;
  profileImage?: string;
  firstName?: string;
  lastName?: string;
  streamReference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "stream";
  };
};

export type Stream = {
  _id: string;
  _type: "stream";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  name?: string;
  thumbnailUrl?: string;
  ingressId?: string;
  serverUrl?: string;
  streamKey?: string;
  isLive?: boolean;
  chatEnabled?: boolean;
  chatDelayed?: boolean;
  chatFollowersOnly?: boolean;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | SanityAssetSourceData | Blocking | Follow | User | Stream | MediaTag | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: SANITY_GET_USER_BY_CLERK_ID
// Query: *[_type == "user" && clerkId == $clerkId][0]
export type SANITY_GET_USER_BY_CLERK_IDResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  clerkId?: string;
  username?: string;
  email?: string;
  profileImage?: string;
  firstName?: string;
  lastName?: string;
  streamReference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "stream";
  };
} | null;
// Variable: SANITY_GET_USER_BY_ID
// Query: *[_type == "user" && _id == $userId][0]
export type SANITY_GET_USER_BY_IDResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  clerkId?: string;
  username?: string;
  email?: string;
  profileImage?: string;
  firstName?: string;
  lastName?: string;
  streamReference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "stream";
  };
} | null;
// Variable: SANITY_GET_USER_BY_USERNAME
// Query: *[_type == "user" && username == $username][0]
export type SANITY_GET_USER_BY_USERNAMEResult = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  clerkId?: string;
  username?: string;
  email?: string;
  profileImage?: string;
  firstName?: string;
  lastName?: string;
  streamReference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "stream";
  };
} | null;
// Variable: SANITY_GET_RECOMMENDED_USERS_QUERY
// Query: *[_type == "user" && clerkId != $clerkId] | order(_createdAt desc) {    ...,    streamReference -> {      isLive,      name    }  }
export type SANITY_GET_RECOMMENDED_USERS_QUERYResult = Array<{
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  clerkId?: string;
  username?: string;
  email?: string;
  profileImage?: string;
  firstName?: string;
  lastName?: string;
  streamReference: {
    isLive: boolean | null;
    name: string | null;
  } | null;
}>;
// Variable: SANITY_GET_EXISTING_FOLLOWING_QUERY
// Query: *[_type == "follow" && followerId._ref == $followerId && followingId._ref == $followingId][0]
export type SANITY_GET_EXISTING_FOLLOWING_QUERYResult = {
  _id: string;
  _type: "follow";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  followerId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  followingId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
} | null;
// Variable: SANITY_GET_MY_FOLLOWINGS_QUERY
// Query: *[_type == "follow" && followerId._ref == $followerId] {    ...,    followingId -> {      ...,      streamReference -> {        isLive,        name      }    }  }
export type SANITY_GET_MY_FOLLOWINGS_QUERYResult = Array<{
  _id: string;
  _type: "follow";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  followerId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  followingId: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    clerkId?: string;
    username?: string;
    email?: string;
    profileImage?: string;
    firstName?: string;
    lastName?: string;
    streamReference: {
      isLive: boolean | null;
      name: string | null;
    } | null;
  } | null;
}>;
// Variable: SANITY_GET_EXISTING_BLOCKING_QUERY
// Query: *[_type == "blocking" && blockerId._ref == $blockerId && blockedId._ref == $blockedId][0]
export type SANITY_GET_EXISTING_BLOCKING_QUERYResult = {
  _id: string;
  _type: "blocking";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  blockerId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  blockedId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
} | null;
// Variable: SANITY_GET_USERS_WHO_BLOCKED_ME_QUERY
// Query: *[_type == "blocking" && blockedId._ref == $blockedId] {      blockerId    }
export type SANITY_GET_USERS_WHO_BLOCKED_ME_QUERYResult = Array<{
  blockerId: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  } | null;
}>;
// Variable: SANITY_GET_STREAM_BY_USER_ID_QUERY
// Query: *[_type == "stream" && userId._ref == $userId][0] {    ...,    userId -> {      ...    }  }
export type SANITY_GET_STREAM_BY_USER_ID_QUERYResult = {
  _id: string;
  _type: "stream";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId: {
    _id: string;
    _type: "user";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    clerkId?: string;
    username?: string;
    email?: string;
    profileImage?: string;
    firstName?: string;
    lastName?: string;
    streamReference?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "stream";
    };
  } | null;
  name?: string;
  thumbnailUrl?: string;
  ingressId?: string;
  serverUrl?: string;
  streamKey?: string;
  isLive?: boolean;
  chatEnabled?: boolean;
  chatDelayed?: boolean;
  chatFollowersOnly?: boolean;
} | null;
// Variable: SANITY_GET_STREAM_BY_ID_QUERY
// Query: *[_type == "stream" && _id == $streamId][0] {    ...  }
export type SANITY_GET_STREAM_BY_ID_QUERYResult = {
  _id: string;
  _type: "stream";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  name?: string;
  thumbnailUrl?: string;
  ingressId?: string;
  serverUrl?: string;
  streamKey?: string;
  isLive?: boolean;
  chatEnabled?: boolean;
  chatDelayed?: boolean;
  chatFollowersOnly?: boolean;
} | null;
// Variable: SANITY_GET_STREAM_BY_INGRESS_ID_QUERY
// Query: *[_type == "stream" && ingressId == $ingressId][0] {    ...  }
export type SANITY_GET_STREAM_BY_INGRESS_ID_QUERYResult = {
  _id: string;
  _type: "stream";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  name?: string;
  thumbnailUrl?: string;
  ingressId?: string;
  serverUrl?: string;
  streamKey?: string;
  isLive?: boolean;
  chatEnabled?: boolean;
  chatDelayed?: boolean;
  chatFollowersOnly?: boolean;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"user\" && clerkId == $clerkId][0]": SANITY_GET_USER_BY_CLERK_IDResult;
    "*[_type == \"user\" && _id == $userId][0]": SANITY_GET_USER_BY_IDResult;
    "*[_type == \"user\" && username == $username][0]": SANITY_GET_USER_BY_USERNAMEResult;
    "*[_type == \"user\" && clerkId != $clerkId] | order(_createdAt desc) {\n    ...,\n    streamReference -> {\n      isLive,\n      name\n    }\n  }": SANITY_GET_RECOMMENDED_USERS_QUERYResult;
    "*[_type == \"follow\" && followerId._ref == $followerId && followingId._ref == $followingId][0]": SANITY_GET_EXISTING_FOLLOWING_QUERYResult;
    "*[_type == \"follow\" && followerId._ref == $followerId] {\n    ...,\n    followingId -> {\n      ...,\n      streamReference -> {\n        isLive,\n        name\n      }\n    }\n  }": SANITY_GET_MY_FOLLOWINGS_QUERYResult;
    "*[_type == \"blocking\" && blockerId._ref == $blockerId && blockedId._ref == $blockedId][0]": SANITY_GET_EXISTING_BLOCKING_QUERYResult;
    "*[_type == \"blocking\" && blockedId._ref == $blockedId] {\n      blockerId\n    }": SANITY_GET_USERS_WHO_BLOCKED_ME_QUERYResult;
    "*[_type == \"stream\" && userId._ref == $userId][0] {\n    ...,\n    userId -> {\n      ...\n    }\n  }": SANITY_GET_STREAM_BY_USER_ID_QUERYResult;
    "*[_type == \"stream\" && _id == $streamId][0] {\n    ...\n  }": SANITY_GET_STREAM_BY_ID_QUERYResult;
    "*[_type == \"stream\" && ingressId == $ingressId][0] {\n    ...\n  }": SANITY_GET_STREAM_BY_INGRESS_ID_QUERYResult;
  }
}
